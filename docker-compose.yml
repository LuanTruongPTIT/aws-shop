version: "3.8"

services:
  # nginx:
  #   image: nginx:1.25.3
  #   restart: unless-stopped
  #   volumes:
  #     - ./nginx/templates:/etc/nginx/templates
  #   ports:
  #     - "80:80"
  #   networks:
  #     - aws-network
  # account:
  #   build: ./account
  #   image: luantruong.io/aws/aws-account:latest
  #   environment:
  #     # - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/product
  #     - SERVER_SERVLET_CONTEXT_PATH=/account
  #     - SERVER_PORT
  #     - YAS_SERVICES_ACCOUNT
  #   # volumes:
  #   #   - ./docker/libs/opentelemetry-javaagent.jar:/opentelemetry-javaagent.jar
  #   networks:
  #     - aws-network
  # identity:
  #   build: ./identity
  #   image: luantruong.io/aws/aws-identity:latest
  #   environment:
  #     # - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/product
  #     - SERVER_SERVLET_CONTEXT_PATH=/identity
  #     - SERVER_PORT
  #   # volumes:
  #   #   - ./docker/libs/opentelemetry-javaagent.jar:/opentelemetry-javaagent.jar
  #   networks:
  #     - aws-network
  postgres:
    image: debezium/postgres:15-alpine
    build: ./docker/postgres
    hostname: ${POSTGRES_HOST}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ./docker/postgres/postgresql.conf.sample:/usr/share/postgresql/postgresql.conf.sample
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres:/var/lib/postgresql/data
    command: postgres -c 'max_connections=500'
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    networks:
      - aws-network
  zookeeper:
    image: debezium/zookeeper:latest
    restart: always
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    networks:
      - aws-network
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: ${KAFKA_SERVICE_HOST}
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_SERVICE_PORT}:${KAFKA_SERVICE_PORT}
      - 29092:29092
    environment:
      - KAFKA_BROKER_ID
      - KAFKA_ZOOKEEPER_CONNECT
      - KAFKA_ADVERTISED_LISTENERS
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
      - KAFKA_INTER_BROKER_LISTENER_NAME
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
    networks:
      - aws-network
  kafka-connect:
    image: debezium/connect:latest
    restart: always
    ports:
      - 8083:8083
      - 5005:5005
    depends_on:
      - zookeeper
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=kafka_connect_configs
      - OFFSET_STORAGE_TOPIC=kafka_connect_offsets
    networks:
      - aws-network
  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   container_name: kafka-ui
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: kafka
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
  #     KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  #     KAFKA_BROKERCONNECT: kafka:9092
  #     DYNAMIC_CONFIG_ENABLED: true
  #   ports:
  #     - 9089:8080
  #   depends_on:
  #     - kafka
  #     - kafka-connect
  #   networks:
  #     - aws-network
  kafka-admin:
    image: "docker.redpanda.com/vectorized/console:latest"
    ports:
      - 8082:8080
    environment:
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - kafka_admin_data:/kafka-admin:z
    depends_on:
      - zookeeper
      - kafka
      - kafka-connect
    networks:
      - aws-network
  # redis-node-1:
  #   image: redis:latest
  #   ports:
  #     - 4000:4000
  #   hostname: redis-node-1
  #   volumes:
  #     - ./redis-node-1:/redis-data
  #   command: redis-server /redis-data/redis.conf
  #   networks:
  #     - aws-network
  # redis-node-2:
  #   image: redis:latest
  #   ports:
  #     - 4001:4001
  #   hostname: redis-node-2
  #   volumes:
  #     - ./redis-node-2:/redis-data
  #   command: redis-server /redis-data/redis.conf
  #   networks:
  #     - aws-network
  # redis-node-3:
  #   image: redis:latest
  #   ports:
  #     - 4002:4002
  #   hostname: redis-node-3
  #   volumes:
  #     - ./redis-node-3:/redis-data
  #   command: redis-server /redis-data/redis.conf
  #   networks:
  #     - aws-network
  # redis-node-4:
  #   image: redis:latest
  #   ports:
  #     - 4003:4003
  #   hostname: redis-node-4
  #   volumes:
  #     - ./redis-node-4:/redis-data
  #   command: redis-server /redis-data/redis.conf
  #   networks:
  #     - aws-network
  # redis-node-5:
  #   image: redis:latest
  #   ports:
  #     - 4004:4004
  #   hostname: redis-node-5
  #   volumes:
  #     - ./redis-node-5:/redis-data
  #   command: redis-server /redis-data/redis.conf
  #   networks:
  #     - aws-network
  # redis-node-6:
  #   image: redis:latest
  #   ports:
  #     - 4005:4005
  #   hostname: redis-node-6
  #   volumes:
  #     - ./redis-node-6:/redis-data
  #   command: redis-server /redis-data/redis.conf
  #   networks:
  #     - aws-network
  redis-insight:
    image: redislabs/redisinsight:latest
    ports:
      - 8001:8001
    volumes:
      - ./redis-insight:/db
    depends_on:
      - redis
    networks:
      - aws-network
  # redis-cluster-master:
  #   image: redis:latest
  #   ports:
  #     - 6999:6999
  #   hostname: redis-cluster-master
  #   command: redis-cli -p 4000 --cluster create redis-node-1:4000 redis-node-2:4001 redis-node-3:4002 redis-node-4:4003 redis-node-5:4004 redis-node-6:4005 --cluster-replicas 1 --cluster-yes
  #   depends_on:
  #     - redis-node-1
  #     - redis-node-2
  #     - redis-node-3
  #     - redis-node-4
  #     - redis-node-5
  #     - redis-node-6
  #   networks:
  #     - aws-network
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped
    networks:
      - aws-network
networks:
  aws-network:
    driver: bridge
    name: aws-network
volumes:
  postgres:
  pgadmin:
  kafka_admin_data:
  redis-data:
  redis-insight:
