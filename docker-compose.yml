version: "3.8"

services:
  postgres:
    image: debezium/postgres:15-alpine
    build: ./docker/postgres
    hostname: ${POSTGRES_HOST}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ./docker/postgres/postgresql.conf.sample:/usr/share/postgresql/postgresql.conf.sample
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres:/var/lib/postgresql/data
    command: postgres -c 'max_connections=500'
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    networks:
      - aws-network
  zookeeper:
    image: debezium/zookeeper:2.7.3.Final
    restart: always
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    networks:
      - aws-network
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: ${KAFKA_SERVICE_HOST}
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_SERVICE_PORT}:${KAFKA_SERVICE_PORT}
      - 29092:29092
    environment:
      - KAFKA_BROKER_ID
      - KAFKA_ZOOKEEPER_CONNECT
      - KAFKA_ADVERTISED_LISTENERS
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
      - KAFKA_INTER_BROKER_LISTENER_NAME
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
    networks:
      - aws-network
  kafka-connect:
    image: debezium/connect:2.4
    restart: always
    ports:
      - 8083:8083
      - 5005:5005
    depends_on:
      - zookeeper
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=kafka_connect_configs
      - OFFSET_STORAGE_TOPIC=kafka_connect_offsets
    networks:
      - aws-network
  kafka-admin:
    image: "docker.redpanda.com/vectorized/console:latest"
    ports:
      - 8082:8080
    environment:
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - kafka_admin_data:/kafka-admin:z
    depends_on:
      - zookeeper
      - kafka
      - kafka-connect
    networks:
      - aws-network
  redis-insight:
    image: redislabs/redisinsight:latest
    ports:
      - 8001:8001
    volumes:
      - ./redis-insight:/db
    depends_on:
      - redis
    networks:
      - aws-network
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped
    networks:
      - aws-network
networks:
  aws-network:
    driver: bridge
    name: aws-network
volumes:
  postgres:
  pgadmin:
  kafka_admin_data:
  redis-data:
  redis-insight:
